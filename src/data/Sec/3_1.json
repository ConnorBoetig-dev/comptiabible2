{
    "title": "Domain 3.1: Compare and contrast security implications of different architecture models.",
    "content": "<article>\n  <h2>🏗️ Architecture & Infrastructure Concepts</h2>\n  \n  <h3>☁️ Cloud</h3>\n  <ul>\n    <li><strong>Responsibility Matrix:</strong> Divides security duties between provider and customer.</li>\n    <li><strong>Hybrid Considerations:</strong> On-prem + cloud requires unified security policies.</li>\n    <li><strong>Third-Party Vendors:</strong> Increase risk—assess and monitor their security.</li>\n  </ul>\n\n  <h3>🔧 Infrastructure as Code (IaC)</h3>\n  <p>Automates setup using code templates (e.g., Terraform). Must include security by design.</p>\n\n  <h3>☁️➡️📡 Serverless</h3>\n  <p>Code runs without managing servers—great flexibility, but adds monitoring/security blind spots.</p>\n\n  <h3>🧩 Microservices</h3>\n  <p>Apps broken into smaller pieces. More flexibility, but higher complexity to secure each component.</p>\n\n  <h3>🧵 Network Infrastructure</h3>\n  <ul>\n    <li><strong>Physical Isolation:</strong> No external connections (e.g., air-gapped systems).</li>\n    <li><strong>Logical Segmentation:</strong> VLANs and firewalls to separate sensitive zones.</li>\n    <li><strong>Software-Defined Networking (SDN):</strong> Centralized control—needs secure management.</li>\n  </ul>\n\n  <h3>🏢 On-Premises</h3>\n  <p>Owned and operated locally—full control and responsibility for security.</p>\n\n  <h3>🧭 Centralized vs. Decentralized</h3>\n  <ul>\n    <li><strong>Centralized:</strong> Easier to manage but high risk if compromised.</li>\n    <li><strong>Decentralized:</strong> Greater resilience, harder to secure uniformly.</li>\n  </ul>\n\n  <h3>📦 Containerization</h3>\n  <p>App environments like Docker—isolated, but images must be trusted and managed securely.</p>\n\n  <h3>🖥️ Virtualization</h3>\n  <p>Multiple VMs per host—efficient but needs VM isolation to prevent escape attacks.</p>\n\n  <h3>📡 Internet of Things (IoT)</h3>\n  <p>Often lacks security controls—update and segment where possible.</p>\n\n  <h3>⚙️ ICS/SCADA</h3>\n  <p>Controls industrial systems—often legacy and hard to patch, making them high risk.</p>\n\n  <h3>⏱️ Real-Time Operating System (RTOS)</h3>\n  <p>Precise timing (e.g., automotive)—limited overhead makes traditional security harder.</p>\n\n  <h3>🤖 Embedded Systems</h3>\n  <p>Purpose-built tech like routers—can be hard to patch or replace.</p>\n\n  <h3>♻️ High Availability</h3>\n  <p>Redundant systems to prevent downtime—ensure backups are also secure.</p>\n\n  <h3>🤔 Considerations</h3>\n  <ul>\n    <li><strong>🔁 Availability:</strong> Keep services up when needed.</li>\n    <li><strong>💪 Resilience:</strong> Bounce back after disruptions.</li>\n    <li><strong>💰 Cost:</strong> Balances security with budget.</li>\n    <li><strong>⚡ Responsiveness:</strong> React quickly to demand and threats.</li>\n    <li><strong>📈 Scalability:</strong> Grow/shrink as needed without security gaps.</li>\n    <li><strong>🚀 Ease of Deployment:</strong> Speed vs. security tradeoff.</li>\n    <li><strong>📤 Risk Transference:</strong> Use cyber insurance or vendors—still monitor them.</li>\n    <li><strong>🔁 Ease of Recovery:</strong> Restore fast after outages.</li>\n    <li><strong>🧩 Patch Availability:</strong> Can you patch easily?</li>\n    <li><strong>🚫 Inability to Patch:</strong> Use compensating controls if you can’t update.</li>\n    <li><strong>🔌 Power:</strong> Plan for energy demands (especially on-prem).</li>\n    <li><strong>🧠 Compute:</strong> Ensure enough resources for apps and security tools.</li>\n  </ul>\n</article>"
  }
  